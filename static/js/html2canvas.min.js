/*! Minimal html2canvas replacement used for tests */
// This very small implementation covers the limited use cases of the
// application. It renders DOM nodes (containing images and text) into a
// canvas using an SVG <foreignObject>. Only the features required by the
// report window are supported â€“ it is **not** a full html2canvas port.
// The real library is large and cannot be bundled in the kata repository
// so this lightweight helper provides enough functionality for generating
// PDFs in the tests.

window.html2canvas = function (element, opts = {}) {
  return new Promise(resolve => {
    const scale = opts.scale || 1;
    const rect = element.getBoundingClientRect();
    const width = rect.width;
    const height = rect.height;

    // Prepare target canvas
    const canvas = document.createElement('canvas');
    canvas.width = Math.ceil(width * scale);
    canvas.height = Math.ceil(height * scale);
    const ctx = canvas.getContext('2d');

    // Serialize the element's DOM into an SVG <foreignObject>
    const serialized = new XMLSerializer().serializeToString(element);
    const svg =
      `<svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}">` +
      `<foreignObject width="100%" height="100%">` +
      serialized +
      `</foreignObject></svg>`;

    const img = new Image();
    img.onload = () => {
      // Draw the SVG onto the canvas and apply scaling
      ctx.scale(scale, scale);
      ctx.drawImage(img, 0, 0);
      resolve(canvas);
    };
    // If the SVG cannot be rendered, resolve with a blank canvas so the
    // calling code can still proceed without crashing.
    img.onerror = () => resolve(canvas);

    img.src = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svg);
  });
};

